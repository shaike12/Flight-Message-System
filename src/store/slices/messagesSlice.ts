import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { GeneratedMessage } from '../../types';

interface MessagesState {
  messages: GeneratedMessage[];
  loading: boolean;
  error: string | null;
}

const initialState: MessagesState = {
  messages: [],
  loading: false,
  error: null,
};

// Async thunk for generating a message
export const generateMessage = createAsyncThunk(
  'messages/generateMessage',
  async (params: {
    flightId: string;
    templateId: string;
    recipients: string[];
    departureCity: string;
    arrivalCity: string;
  }) => {
    // In a real app, this would be an API call
    const newMessage: GeneratedMessage = {
      id: Date.now().toString(),
      flightId: params.flightId,
      templateId: params.templateId,
      content: '', // This would be generated by the server
      recipients: params.recipients,
      status: 'draft',
      createdAt: new Date().toISOString(),
      departureCity: params.departureCity,
      arrivalCity: params.arrivalCity,
    };
    return newMessage;
  }
);

// Async thunk for sending a message
export const sendMessage = createAsyncThunk(
  'messages/sendMessage',
  async (messageId: string) => {
    // In a real app, this would be an API call
    return messageId;
  }
);

const messagesSlice = createSlice({
  name: 'messages',
  initialState,
  reducers: {
    updateMessage: (state, action: PayloadAction<GeneratedMessage>) => {
      const index = state.messages.findIndex(message => message.id === action.payload.id);
      if (index !== -1) {
        state.messages[index] = action.payload;
      }
    },
    deleteMessage: (state, action: PayloadAction<string>) => {
      state.messages = state.messages.filter(message => message.id !== action.payload);
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(generateMessage.fulfilled, (state, action) => {
        state.messages.push(action.payload);
      })
      .addCase(sendMessage.fulfilled, (state, action) => {
        const message = state.messages.find(msg => msg.id === action.payload);
        if (message) {
          message.status = 'sent';
          message.sentAt = new Date().toISOString();
        }
      })
      .addCase(sendMessage.rejected, (state, action) => {
        const message = state.messages.find(msg => msg.id === action.meta.arg);
        if (message) {
          message.status = 'failed';
        }
      });
  },
});

export const { updateMessage, deleteMessage } = messagesSlice.actions;
export default messagesSlice.reducer;

